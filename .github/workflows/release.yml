name: Release

on:
  push:
    branches: ["main"]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    # Prevent running on PR merges
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.12.0"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9.15.2 # optional

      - name: Install NPM Dependencies
        run: pnpm install

      - name: Get old version from package.json
        id: get_old_version
        run: |
          OLD_VERSION=$(jq -r .version < package.json)
          echo "OLD_VERSION=${OLD_VERSION}" >> $GITHUB_OUTPUT
          echo ${OLD_VERSION}

      - name: Create Version PR or Publish to NPM
        id: changesets
        uses: changesets/action@v1.4.9
        with:
          commit: "chore(release): version packages"
          title: "chore(release): version packages"
          version: node .github/changeset-version.js
          publish: npx changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_ENV: "production"

      - name: Get new version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version < package.json)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo ${VERSION}
          echo ${{ env.VERSION != env.OLD_VERSION }}

      - name: Create .npmrc for Authentication
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Build and Publish
        id: build_pub
        if: ${{ env.VERSION != env.OLD_VERSION }}
        run: |
          pnpm build
          pnpm release

      - name: Create Release
        id: create_release
        if: ${{ env.VERSION != env.OLD_VERSION }}
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
